var listaDeFrutas = [ "Uva", "Banana",  "Manga", "Cajá", "Pinha"]
var busca = "Cajá"

for(let i=0; i < listaDeFrutas.length; i++){
    if ( busca == listaDeFrutas[i]){
        console.log("Sim, temos a fruta banana disponível")
        break
    }
    
     
}

var cartela = [8, 13, 18, 22, 42, 49]
var numeroSorteado = 42


for(var i; i< cartela.length; i++){
    if(cartela[i] == numeroSorteado){
        console.log("Encontrei o número!")
        break
    }
}


var listaDeNomes = ['Cesar', 'Pamela', 'Camila', 'Hendy']
var buscar = 'Cesar' //Nome que iremos buscar

for(var i =0; i < listaDeNomes.length; i++){
    if(listaDeNomes[i] == buscar){
    console.log('Encontrei o nome')
    break
    }
}





var cartela = [8, 13, 18, 22, 42 , 49]
var numeroSorteado = 42

for(var i =0; i < cartela.length; i++){
    if (cartela[i] == numeroSorteado){
    console.log("Encontrei o número!")
    break
    }
    
     
}

for (var numero  = 0; numero  < 21; numero ++){
    if(numero % 2 == 1 ){
        continue  
    }
    console.log(i)
}


var familia = ["Joana", "Felipe", "Gabriela", "Carlos", "Pedro", "Bruno"]


for(var i =0; i < familia.length; i++){
    if (familia[i] == "Pedro"){
    console.log("Pedro Souza")
    continue
    }
    console.log(familia[i] + " Macedo")
     
}


function tabuadaDoSete() {
    for (var i = 1; i<=10; i++) {
    console.log("7 x "+i+ " = " + i)
    }
}

tabuadaDoSete()


function tabuadaDoSete() {
    for (var i = 1; i<=10; i++) {
    
    }
    console.log([i].length)
}

tabuadaDoSete()


function menorNumero( a=10, b=10){
    if(a < b){
        return a;
    }else{
        return b;
    }
}
menorNumero()


function autonomia(quantidadeDeCombustivel, rendimento){
    rendimento = 20;
    quantidadeDeCombustivel=5;
     
    autonomia = quantidadeDeCombustivel * rendimento
    return autonomia
}

autonomia()


//Usando funções - Começa com Maiúscula
//O código abaixo já tem a função comecaComMaiuscula(palavra) definida. Essa função retorna true caso a palavra passada no parâmetro seja iniciada por uma letra maiúscula e false caso contrário. Use um for para imprimir para cada palavra no array de palavras as seguintes frases: “Começa com maiúscula” caso a palavra comece com maiúscula e “Não começa com maiúscula” caso contrário.
//errado
function comecaComMaiuscula(palavra){
    return /^[A-Z]/.test(palavra)
}
comecaComMaiuscula(palavras)

var palavras = ["Amor", "copo", "Bolacha", "biscoito"];
  
for (let i=0; palavras.length; i++){
    if(palavras[i] == comecaComMaiuscula){
        console.log("Começa com maiúscula")
    }else{
        console.log("Não começa com maiúscula")
    }
}

//correto

function comecaComMaiuscula(palavra){
    return /^[A-Z]/.test(palavra)
}
comecaComMaiuscula(palavras)

var palavras = ["Amor", "copo", "Bolacha", "biscoito"];

for(var i = 0; i < palavras.length; i++){
var maiuscula = comecaComMaiuscula(palavras[i]);

  if(maiuscula == true){

     console.log("A palavra " + palavras[i] + " Começa com maiuscula")

     continue

  }else{

     console.log("A palavra " +palavras[i] + " Não começa com maiuscula")

  }

}


//Usando funções - Valida CPF
//Temos no código abaixo uma função que já foi definida. Ela se chama validaCPF.

//Ela definida para receber um parâmetro que representa um possível CPF. Tudo que ela faz resumi-se em um único objetivo: Retornar true caso o parâmetro seja um CPF válido ou false caso contrário. Eis aqui algo legal sobre funções: tudo que você precisa para utilizá-las é saber o que ela faz. Você não precisa saber o como ela faz.


//Execute utilize a função validaCPF para imprimir “CPF válido” caso o “576.524.020-85” seja um cpf válido. Caso contrário, imprima “CPF inválido”




var verifica = validaCpf("576.524.020-85");
    
      if(verifica == true){
    
         console.log("O cpf é valido" )
    
         continue
    
      }else{
    
        console.log("O cpf não é valido" )
    
      }


    validaCPF("576.524.020-85")

    for(var i=0; i<validaCPF.lenght; i++){
    
    if(validaCPF[i]==true){
    
       console.log('CPF válido')
    
    }else{
    
       consloe.log("CPF inválido")
    
    }
    
    }


    /*
    Usando funções - deixaEntrar
Uma rede de cinemas quer implementar um sistema para controlar a entrada nas suas salas. Os clientes, antes de entrar na sala, devem apresentar o RG em uma câmera. A câmera seria capaz de ler a data de nascimento do cliente e, caso ele não tenha idade suficiente para assistir a sessão, o acesso dele não seria autorizado.

Um dos programadores já fez uma função que calcula a idade com base na data de nascimento. Ela recebe como parâmetro uma data de nascimento no formato dd/mm/aaaa (dia com dois dígitos, mês com dois dígitos e ano com quatro dígitos) e retorna idade da pessoa hoje.


Precisamos agora que você escreva a função deixaEntrar(dataDeNascimento, censura).


A função deve receber dois parâmetros:

O primeiro deve representar a data de nascimento do cliente no formato dd/mm/aaaa 


O segundo deve representar a censura da sessão, ou seja, a idade mínima do cliente para que ele possa acessar a sala.


A função deve retornar true caso o cliente tenha idade maior ou igual a censura e false caso contrário. 
    */




    //função deles 
    function calcularIdade(dataDeNascimento) {
        var [dia, mes, ano] = dataDeNascimento.split('/');
        var d = new Date();
        var anoAtual = d.getFullYear();
        var mesAtual = d.getMonth() + 1;
        var diaAtual = d.getDate();
        ano = +ano; mes = +mes; dia = +dia;
        var quantosAnos = anoAtual - ano;
        if (mesAtual < mes || mesAtual == mes && diaAtual < dia) {
            quantosAnos--;
        }
        return quantosAnos < 0 ? 0 : quantosAnos;
     }

     //Você deve utilizar a função calcularIdade dentro da função deixaEntrar

     function deixaEntrar(dataDeNascimento, censura){
        dataDeNascimento = "10/10/1998"; 
        censura=18;
        calcularIdade(dataDeNascimento);
        return true (dataDeNascimento == censura) ||  false(dataDeNascimento < censura)

     }



     /*Usando funções - Filtrar produtos
Uma loja virtual permite a seus visitantes filtrar produtos pelo preço. Existe um array com os preços dos produtos. Um programador já criou uma função maisBaratosQue(valor, precos) que retorna um array com os preços dos produtos mais baratos que o valor passado como parâmetro. Outro programador já criou uma função maisCarosQue(valor, precos) que retorna um array com os preços mais caros que o valor passado como parâmetro. Chegou sua vez!


Crie uma função precosEntre(valorMenor, valorMaior, precos) que deve utilizar as funções maisBaratosQue e maisCarosQue para retornar os preços que estão entre o valorMenor e o valorMaior. Sua função deve receber então dois parâmetros:

valorMenor para representar o valor mínimo dos preços a serem listados

valorMaior para representar o valor máximo dos preços a serem listados

precos para representar um array com os preços dos produtos

Ela deve retornar um array com todos os preços entre valorMenor e valorMaior*/

function maisBaratosQue(valor, precos) {
    return precos.filter(p => p <= valor);
 }
  
 function maisCarosQue(valor, precos){
    return precos.filter(p => p >= valor);
 }

 //errado
function precosEntre(valorMenor, valorMaior, precos){
    valorMaior = 10;
    valorMenor = 5;
    
    maisCarosQue(valorMenor)
    maisBaratosQue(valorMaior)

}

//certo

function precosEntre(valorMenor, valorMaior, precos) {

    return maisCarosQue(valorMenor, maisBaratosQue(valorMaior, precos));
 
}


/*Funções Nativas - Estava presente na aula?
Nas escolas do futuro não haverá necessidade de chamadas. Ao entrar em sala, uma câmera fará o reconhecimento facial do aluno e registrará sua presença!
Imagine que, a cada aula, um array guardasse o nome de todos os alunos que estiveram presentes na aula.

Escreva uma função estavaPresenteNaAula(nomeDoAluno, nomesDosPresentes)

Essa função deve receber dois parâmetros:

O primeiro deve representar o nome de um aluno

O segundo deve representar um array com o os nomes dos alunos presentes.

A sua função deve retornar true caso o nome do aluno passado como parâmetro estiver entre os presentes. false caso contrário.
Não é necessário percorrer o array inteiro com um for. Lembre da “.indexOf”*/

//errado
function estavaPresenteNaAula(nomeDoAluno, nomesDosPresentes){
    nomeDoAluno = "Glédison"
    nomesDosPresentes = ["Glédison","Junior","MAtheus","Alex","Juca","Djalma", "Darlan"]

    console.log(nomesDosPresentes.indexOf('Glédison'));
    return (nomesDosPresentes.indexOf('Glédison')) ||  (nomesDosPresentes.indexOf(!'Glédison'))

}


estavaPresenteNaAula()

//errado
function estavaPresenteNaAula(nomeDoAluno, nomesDosPresentes){
    nomeDoAluno = "Caio"
    nomesDosPresentes = ["Matheus", "Leticia","Caio"]

    console.log(nomesDosPresentes.indexOf('Caio'));
    return true = (nomesDosPresentes.indexOf('Glédison')) || false (nomesDosPresentes.indexOf(!'Glédison'))

}


estavaPresenteNaAula()


//certo

function estavaPresenteNaAula(nomeDoAluno, nomesDosPresentes){
    nomeDoAluno = "Caio";
    nomesDosPresentes = ["Matheus", "Leticia","Caio"]

    if (nomesDosPresentes.indexOf(nomeDoAluno) != -1)
    {
    return true;
    }
    else
    {
    return false;
    }
    }
    

estavaPresenteNaAula()


/*Funções Nativas - transformaParaMaiusculo
 Algumas vezes precisamos padronizar as informações antes de guardá-las no nosso sistema. Escreva uma função transformaParaMaiusculo(palavras). Essa função recebe como parâmetro um array de palavras. Ela deve retornar um array com a versão MAIÚSCULA de todas as palavras contidas no array passado como parâmetro. */

 //errado
 function transformaParaMaiusculo(palavras){
    palavras = ["gato","cachorro","tartaruga"]
    for (var i = 0; palavras.lenght; i++){
        Array.push(palavras[i].toUpperCase())
        return array
    }

 }

 transformaParaMaiusculo()


 //certo
 function transformaParaMaiusculo(palavras) {  
    palavras = ["gato","cachorro","tartaruga"]
    var array=Array()
   
    for(var i=0;i<palavras.length;++i)
   
        array.push(palavras[i].toUpperCase())
   
    return array
   
   }
   
   
    transformaParaMaiusculo()

/*Funções Nativas - Gerar Dezenas
Uma fábrica de biscoitos da sorte precisa de um sistema. O sistema deve gerar seis dezenas aleatórias para serem impressas. Sabe como é: Palpites para seus clientes jogarem na mega sena! O seu trabalho é escrever uma função gerarDezenas(). Essa função não recebe nenhum parâmetro. Tudo que ela deve fazer é gerar e retornar um array contendo seis números aleatórios entre 1 e 60.
*/
function gerarDezenas(){
    var array=Array()
    for(let i = 0; i < 5; i++){
    Math.random() * 60
    Math.round(Math.random() * 60)
    return array
    }

}

gerarDezenas()

/*Funções Nativas - Maximo e Minimo
Escreva uma função maxmin(a, b, c, d, e) que receba cinco números como parâmetros.
Sua função deve retornar um array onde o primeiro elemento é o menor dos parâmetros e o segundo elemento é o maior dos parâmetros.*/

function maxmin(a, b, c, d, e){

}

